/** 基本的な制御構文 */

/** if
 * 一般的な条件分岐、C系の言語と同じ
 */

/** switch
 * case で設定されている値を「===」で探索
 * caseの条件が重複しているcaseはESLintの推奨設定でも有効になる
 * 「no-duplicate-case」オプションで検知できる。
 * break を忘れると、次の case が実行されるが、ESLintの推奨設定で有効になる「no-fallthrough」オプションで検知できる。
 */

/** for
 * 
 * -----for in-----
 * 使わない
 * 
 * -----for of-----
 * of の右側には、イテレータプロトコルをサポートする、次のような要素が書ける。
 * 配列、 Map 、 Set 、文字列
 * イテレータを返すメソッドや関数の呼び出し
 * array.entries()     （配列のインデックスと値がセットで返ってくる）
 * Object.keys(obj)    （オブジェクトのキーが返ってくる）
 * Object.values(obj)  （オブジェクトの値が返ってくる）
 * Object.entries(obj) （オブジェクトのキーと値が返ってくる）
 * map.keys()          （Map のキーが返ってくる）
 * map.values()        （Map の値が返ってくる）
 * map.entries()       （Map のキーと値が返ってくる）
 * キーと値の両方が帰ってくるメソッドは、分割代入を用いて変数に入れる。
 * ----------------------------------------------------------------
 *  Object.keys() はES5。
 * 他のものを使うときは、ターゲットバージョンをES2015以上にするか、
 * ターゲットバージョンを低くする代わりに「Polyfill」を設定する。
 * ----------------------------------------------------------------
 * イテレータは、配列以外にも、配列のような複数の値を含むデータ構造（シーケンス）が共通で備えるインタフェース。
 * このインタフェースを実装することで、ユーザークラスでも for..of ループと一緒に使えるようになる。
 * 
 * -----for await for-----
 * ES2018で導入されました。ループごとに非同期の待ち処理を入れる。
 * これに対応するには、asyncIteratorに対応した要素を条件文の右辺に持ってくる必要があるが、
 * 現在サポートしているのは ReadableStream ぐらいしかない。
 * このクラスは、 fetch() のレスポンスの body プロパティぐらいでしか見かけない。
 * 対応するクラスを自作することもできる。
 * ------------------------------------------
 * for await (const body of response.body) {
 *  console.log(body);
 * }
 * ------------------------------------------
 * 並行して処理を投げる場合は、Promise.all() を使い、
 * すべてのリクエストはすべて待たずに投げてしまう方が効率的。
 * for await of は同期的な仕事でのみ利用されることを想定している。
 * 
 * -----while, do while-----
 * C系と同じ
 * 
 * -----try catch-----
 * JavaScriptは型を使って複数の catch 節を振り分けることができない。
 * catch には1つだけ入れ条件文を書く。
 * ES2017で導入された async 関数は非同期処理の中のエラーを例外として投げる。
 */

/** 式
 * Typescript(javascript)独自
 * 
 * -----比較演算子 === と = (否定: !== !=)-----
 * 前者は、一致を厳密に見る。
 * ->配列やオブジェクトは、インスタンスが同一かどうかで判定
 * 後者は、文字列に変換してから比較する。
 * 
 * ----- ** -----
 * 累乗計算
 * x ** y = Math.pow(x, y)
 */

// 三項演算子
const day: string = "金曜日";
const result: string = day === "金曜日" ? "明日は休みなので絵を描く" : "家に帰る";
console.log(result);
/** Reactは1行の一筆書き(1つのreturn分の中)で、仮想DOM(巨大なjavascriptのオブジェクト)を生成する。
 * このときに条件分岐のコードとして三項演算子が役に立つ。
 * -------------------------------------------------------------------------------
 * render() {
 *   return (
 *     <div>
 *       { this.state.loggedIn ? <p>ようこそ</p> : <p>ログインが必要です</p> }
 *     </div>
 *   );
 * }
 * -------------------------------------------------------------------------------
 * 
 * ループは配列のメソッドを使うことが多い
 * -------------------------------------------------------------------------------
 * render() {
 *   return (
 *     <ul>
 *       { this.state.users.map(user => {
 *         <li>{user.name}</li>
 *       })
 *     </ul>
 *   );
 * }
 * -------------------------------------------------------------------------------
 */

